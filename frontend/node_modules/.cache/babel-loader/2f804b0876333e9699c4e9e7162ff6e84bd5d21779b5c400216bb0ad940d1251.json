{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\fashion-paris-ecommerce\\\\frontend\\\\src\\\\components\\\\common\\\\AdminRoute.js\";\nimport React from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isAdmin = () => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    return false;\n  }\n  try {\n    const decodedToken = jwtDecode(token);\n    // Vérifie si le token n'est pas expiré et si le rôle est 'admin'\n    return decodedToken.role === 'admin' && decodedToken.exp * 1000 > Date.now();\n  } catch (error) {\n    return false;\n  }\n};\nconst AdminRoute = () => {\n  // Si l'utilisateur est admin, on affiche le contenu de la route (via Outlet)\n  // Sinon, on le redirige vers la page d'accueil ou de login\n  return isAdmin() ? /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 22\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 35\n  }, this);\n};\n_c = AdminRoute;\nexport default AdminRoute;\nvar _c;\n$RefreshReg$(_c, \"AdminRoute\");","map":{"version":3,"names":["React","Navigate","Outlet","jwtDecode","jsxDEV","_jsxDEV","isAdmin","token","localStorage","getItem","decodedToken","role","exp","Date","now","error","AdminRoute","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/wamp64/www/fashion-paris-ecommerce/frontend/src/components/common/AdminRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nconst isAdmin = () => {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) {\r\n    return false;\r\n  }\r\n  try {\r\n    const decodedToken = jwtDecode(token);\r\n    // Vérifie si le token n'est pas expiré et si le rôle est 'admin'\r\n    return decodedToken.role === 'admin' && decodedToken.exp * 1000 > Date.now();\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst AdminRoute = () => {\r\n  // Si l'utilisateur est admin, on affiche le contenu de la route (via Outlet)\r\n  // Sinon, on le redirige vers la page d'accueil ou de login\r\n  return isAdmin() ? <Outlet /> : <Navigate to=\"/login\" />;\r\n};\r\n\r\nexport default AdminRoute; "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AACnD,SAASC,SAAS,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EACpB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACF,KAAK,EAAE;IACV,OAAO,KAAK;EACd;EACA,IAAI;IACF,MAAMG,YAAY,GAAGP,SAAS,CAACI,KAAK,CAAC;IACrC;IACA,OAAOG,YAAY,CAACC,IAAI,KAAK,OAAO,IAAID,YAAY,CAACE,GAAG,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;EAC9E,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAO,KAAK;EACd;AACF,CAAC;AAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;EACvB;EACA;EACA,OAAOV,OAAO,CAAC,CAAC,gBAAGD,OAAA,CAACH,MAAM;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,gBAAGf,OAAA,CAACJ,QAAQ;IAACoB,EAAE,EAAC;EAAQ;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC1D,CAAC;AAACE,EAAA,GAJIN,UAAU;AAMhB,eAAeA,UAAU;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}